{% assign endpoint = Model.Endpoint | href %}
<div id="bonus-action-modal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered profile" role="document">
    <form class="modal-content section-panel profile" action="{{ endpoint }}" method="POST">
      <div class="modal-header profile">
        <h2 class="h2 modal-title">{{ "Request a Kubeflow namespace" | t }}</h2>
        <button type="button" class="btn btn-primary is-circle" data-dismiss="modal" aria-label="{{ 'Close' | t }}">
          <span aria-hidden="true"><i class="fas fa-times"></i></span>
        </button>
      </div>
      <div class="modal-body profile">
        <div class="container">
          <div class="row align-items-center justify-content-center text-center">
            <div class="col-lg-4 col-md-6 col-sm-8 col-12">
              <div class="form-group">
                <label class="asterix">{{ "Namespace name" | t }}</label>
                <input id="field-namespace" name="Namespace" class="form-control" type="text" required aria-describedby="Namespace-described-by" />
                <span id="Namespace-described-by" class="text-danger"></span>
              </div>
            </div>
            <p class="col-12 text-secondary">{{ "An admin will follow up with you at" | t }} {{ User | get_claim: 'email' }} {{ "with questions or updates." | t }}</p>
          </div>
        </div>
      </div>
      <div class="modal-footer profile">
        <input name="User" type="hidden" value="{{ User.Identity.Name }}" />
        <input name="Email" type="hidden" value="{{ User | get_claim: 'email' }}" />
        {% antiforgerytoken %}
        <button type="submit" class="btn btn-lg btn-primary is-rounded">{{ "Send request" | t }}</button>
      </div>
    </form>
  </div>
</div>

{% block "script", at:"Foot" %}
  $('#bonus-action-modal').on('shown.bs.modal', function () {
    $('#field-namespace').focus()
  })

  $('#field-namespace').keypress(function (e) {
    var regex = new RegExp("^[a-zA-Z-]+");
    var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
    if (regex.test(str)) {
        return true;
    }

    e.preventDefault();
    return false;
  });
{% endblock %}